Pre-requisites

JDK 1.8 or later.
Maven 3.2 or newer, or Gradle 4+ to handle your dependencies.
Amadeus API key - you will need this to search and book flights with Amadeus. Sign-up here for a free account and create an app in your My Self-Service Workspace to generate an API key.
Amadeus Java SDK - this will make it fast and easy to connect to Amadeus. To install the Amadeus Java SDK with Maven, add these lines to the pom.xml file:
<dependency>
  <groupId>com.amadeus</groupId>
  <artifactId>amadeus-java</artifactId>
  <version>5.7.2</version>
</dependency>
 

Step 1 - Setting up Spring Boot

For this tutorial, you'll use Java Spring Boot to get your HTTP routes set up quickly.

First, use the Spring Initializr. Your IDE of choice should run Spring easily; otherwise, generate a .zip file from the above link and import it. After installation, your pom.xml file should look like this:

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.5.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.Amadeus</groupId>
    <artifactId>app</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>app</name>
    <description>Demo project for the Amadeus Flight and Travel API</description>
    <properties>
        <java.version>11</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.amadeus</groupId>
            <artifactId>amadeus-java</artifactId>
            <version>5.7.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.7</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
Note that you include the Gson library for handling JSON. Open the src\\main\\resources\\application.properties and add this line: spring.http.converters.preferred-json-mapper=gson.

 

Step 2 - Creating a web application

Next, set up a simple controller. Create an ApiController.java file in the same directory as the autogenerated Spring Application class, using src\\main\\java\\com\\app\\flight. Preface these controller routes with api using Spring’s @RequestMapping decorator.

package com.amadeus.flight;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
@RestController
@RequestMapping(value="/api")
public class ApiController {
    @GetMapping("/")
    public String hello() {
        return "Hello World Travel!"
    }
Test your installation by checking if the page exists. I was able to see it at localhost:8080/api/, which is the default, but your Spring installation might be using a different port.

 

Step 3 - Connecting to Amadeus

Next, you'll begin to set up your endpoints.

First, you'll need to request data from the Airport & City Search API to allow your user to select their origin and destination. The API turns common names of places into IATA location codes needed to search flights.

Create an AmadeusConnect.java class to hold your previously-generated Amadeus API keys and make connections:

package com.app.flight;
import com.amadeus.Amadeus;
import com.amadeus.Params;
import com.amadeus.referenceData.Locations;
import com.amadeus.resources.Location;
import com.amadeus.exceptions.ResponseException;
enum AmadeusConnect {
    INSTANCE;
    private Amadeus amadeus;
    private AmadeusConnect() {
        this.amadeus = Amadeus
            .builder("YOUR_API_KEY", "YOUR_API_SECRET")
            .build();
    }
    public Location[] location(String keyword) throws ResponseException {
        return amadeus.referenceData.locations.get(Params
            .with("keyword", keyword)
            .and("subType", Locations.AIRPORT));
    }
}
To retrieve your list of location codes, make a locations endpoint that accepts GET requests in the ApiController class. You’ll have to enter a required keyword (the city name typed by the user). This API also requires a subType, but this tutorial defaults that value to airports in the location function. Test this new route at localhost:8080/api/locations?keyword=LON.

For this sample application, you’re printing out error messages to aid debugging, but these errors should be hidden and handled before production.

 @GetMapping("/locations")
    public Location[] locations(@RequestParam(required=true) String keyword) throws ResponseException {
        return AmadeusConnect.INSTANCE.location(keyword);
    }
 

Step 4 - Understanding the flight booking flow

Now that you have your location, it's time to guide the user through booking a flight. You can accomplish this using the following 3 APIs:

Flight Offers Search

Search flights
Fetch flight offers matching your user's search criteria.

VIEW DOCUMENTATION
Flight Offers Price

Decorative image for price
Confirm the final price of a selected flight offer.

VIEW DOCUMENTATION
Flight Create Orders

Decorative image for book
Book the flight offer and generate a booking number.

VIEW DOCUMENTATION
 

You’ll want a controller action and route to interact with each of these services.

 

Step 5 - Searching flight offers

Once you have a destination, you must search for flights using the Flight Offers Search API. The API offers both GET and POST options, but for this tutorial you'll use the GET method for simplicity. Looking at the API reference, notice that there are four required fields:

Parameter	Description
originLocationCode
IATA code of the city/airport of departure
destinationLocationCode
IATA code of the city/airport of arrival
departureDate
Date of departure in ISO 8601 format
adults
Number of adult passengers
 

Note that the returnDate field isn’t required. However, leaving this field blank will search for one-way flights only, so add it.

Make a new function to handle the request in AmadeusConnect.java:

    public FlightOfferSearch[] flights(String origin, String destination, String departDate, String adults, String returnDate) throws ResponseException {
        return amadeus.shopping.flightOffersSearch.get(
                  Params.with("originLocationCode", origin)
                          .and("destinationLocationCode", destination)
                          .and("departureDate", departDate)
                          .and("returnDate", returnDate)
                          .and("adults", adults)
                          .and("max", 3));
    }
Adding the parameter max lets you limit the flight offers returned by the API.

Next, add a route to FlightController.java. You can test this route with a URL request: flights?origin=LON&destination=NYC&departDate=2022-11-15&returnDate=2022-11-17&adults=3. Note that dates must be formatted using ISO 8601 or YYYY-MM-DD.

@GetMapping("/flights")
    public FlightOfferSearch[] flights(@RequestParam(required=true) String origin,
                          @RequestParam(required=true) String destination,
                          @RequestParam(required=true) String departDate,
                          @RequestParam(required=true) String adults,
                          @RequestParam(required = false) String returnDate)
                          throws ResponseException {
        return AmadeusConnect.INSTANCE.flights(origin, destination, departDate, adults, returnDate);
    }
 

Step 6 - Confirming the price a flight offer

As airlines continuously update information in real time, the next step is to re-confirm the final price and availability of the selected flight and generate an offer summary for the user to book.

There are multiple requirements for the Flight Offers Price API, but you can save and reuse the data structure returned from Flight Offers Search to keep the request simple. Again, formulate the request in AmadeusConnect.java.

public FlightPrice confirm(FlightOfferSearch offer) throws ResponseException {
    return amadeus.shopping.flightOffersSearch.pricing.post(offer);
}
As always, you must add an endpoint to the ApiController class:

    @PostMapping("/confirm")
    public FlightPrice confirm(@RequestBody(required=true) FlightOfferSearch search) throws ResponseException {
        return AmadeusConnect.INSTANCE.confirm(search);
    }
